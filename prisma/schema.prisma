generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  name          String?
  popularity    Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  connections   Connection[]
  password      Password?
  reports       Report[]
  sessions      Session[]
  tickets       Ticket[]
  gameRoles     UserGameRole[]
  image         UserImage?
  roles         UserRole[]
  videos        Video[]
  videoComments VideoComment[]
}

model UserRole {
  id          String       @id @default(cuid())
  roleId      String
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  role        Role         @relation(fields: [roleId], references: [id])
  permissions Permission[] @relation("PermissionToUserRole")
}

model UserGameRole {
  id     String @id @default(cuid())
  userId String
  type   String
  power  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String     @id @default(cuid())
  action      String
  entity      String
  access      String
  description String     @default("")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roles       UserRole[] @relation("PermissionToUserRole")

  @@unique([action, entity, access])
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String     @default("")
  roles       UserRole[]
}

model Video {
  id           String         @id @default(cuid())
  title        String
  description  String?
  videoLink    String // Link to the video
  thumbnail    String? // Optional link to a thumbnail or preview image
  contentType  String // Video format or MIME type
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ownerId      String
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  comments     VideoComment[]
  reports      Report[]
  tickets      Ticket[]
  totalTickets Int            @default(0)
}

model VideoComment {
  id      String @id @default(cuid())
  userId  String
  videoId String
  content String
  video   Video  @relation(fields: [videoId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
  @@unique([providerId, userId])
}

model Report {
  id      String @id @default(cuid())
  videoId String
  userId  String
  reason  String
  video   Video  @relation(fields: [videoId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String       @id @default(cuid())
  videoId     String
  userId      String
  totalPower  Int
  video       Video        @relation(fields: [videoId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  roleTickets RoleTicket[]
}

model RoleTicket {
  id       String @id @default(cuid())
  ticketId String
  roleType String // e.g., "Artist", "Critic", etc.
  power    Int
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}
