generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(cuid())
  email       String         @unique
  username    String         @unique
  name        String?
  popularity  Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  comments    Comment[]
  connections Connection[]
  notes       Note[]
  password    Password?
  reports     Report[]
  sessions    Session[]
  tickets     Ticket[]
  gameRoles   UserGameRole[]
  image       UserImage?
  roles       UserRole[]
}

model UserRole {
  id          String       @id @default(cuid())
  roleId      String
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  role        Role         @relation(fields: [roleId], references: [id])
  permissions Permission[] @relation("PermissionToUserRole")
}

model UserGameRole {
  id     String @id @default(cuid())
  userId String
  type   String
  power  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String     @id @default(cuid())
  action      String
  entity      String
  access      String
  description String     @default("")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roles       UserRole[] @relation("PermissionToUserRole")

  @@unique([action, entity, access])
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String     @default("")
  roles       UserRole[]
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ownerId   String
  comments  Comment[]
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images    NoteImage[]
  reports   Report[]
  tickets   Ticket[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model Ticket {
  id          String @id @default(cuid())
  userId      String
  noteId      String
  ticketPower Int
  note        Note   @relation(fields: [noteId], references: [id])
  user        User   @relation(fields: [userId], references: [id])
}

model Comment {
  id      String @id @default(cuid())
  userId  String
  noteId  String
  content String
  note    Note   @relation(fields: [noteId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Report {
  id     String @id @default(cuid())
  noteId String
  userId String
  reason String
  note   Note   @relation(fields: [noteId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model NoteImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  noteId      String
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
  @@unique([providerId, userId])
}
