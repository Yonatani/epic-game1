generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(cuid())
  email      String         @unique
  username   String         @unique
  name       String?
  popularity Int            @default(0)
  roles      UserRole[]
  gameRoles  UserGameRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  sessions    Session[]
  connections Connection[]
  tickets     Ticket[]
  comments    Comment[]
  reports     Report[]
}

model UserRole {
  id     String @id @default(cuid())
  roleId String
  userId String

  role        Role         @relation(fields: [roleId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  permissions Permission[]
}

model UserGameRole {
  id     String @id @default(cuid())
  userId String
  type   String // Role type, e.g., "artist" or "critic"
  power  Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Permission {
  id          String     @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String     @default("")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roles       UserRole[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  roles UserRole[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  tickets  Ticket[]
  images   NoteImage[]
  comments Comment[]
  reports  Report[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model Ticket {
  id          String @id @default(cuid())
  userId      String
  noteId      String
  ticketPower Int

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])
}

model Comment {
  id      String @id @default(cuid())
  userId  String
  noteId  String
  content String

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])
}

model Report {
  id     String @id @default(cuid())
  noteId String
  userId String
  reason String

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
  @@unique([providerId, userId])
}
